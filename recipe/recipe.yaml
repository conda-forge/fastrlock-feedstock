context:
  name: fastrlock
  version: 0.8.3

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/${{ name[0] }}/${{ name }}/${{ name }}-${{ version }}.tar.gz
  sha256: 4af6734d92eaa3ab4373e6c9a1dd0d5ad1304e172b1521733c6c3b3d73c8fa5d

build:
  # We need to pass --with-cython to force cython to regenerate the .c file
  number: 1
  script: ${{ PYTHON }} -m pip install . --global-option="--with-cython" -vv

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - cython
    - ${{ compiler("c") }}
    - ${{ stdlib("c") }}
    - ${{ compiler("cxx") }}
  host:
    - python
    - pip
    - setuptools
    - cython
  run:
    - python

tests:
  - python:
      imports:
        - fastrlock
      pip_check: false

about:
  license: MIT
  license_file: LICENSE
  summary: This is a C-level implementation of a fast, re-entrant, optimistic lock for CPython
  description: |
    This is a C-level implementation of a fast, re-entrant,
    optimistic lock for CPython. It is a drop-in replacement for
    threading.RLock. FastRLock is implemented in Cython and also provides a
    C-API for direct use from Cython code via from fastrlock cimport rlock.

    Under normal conditions, it is about 10x faster than threading.RLock in
    Python 2.7 because it avoids all locking unless two or more threads try to
    acquire it at the same time. Under congestion, it is still about 10% faster
    than RLock due to being implemented in Cython.

    This is mostly equivalent to the revised RLock implementation in Python
    3.2, but still faster due to being implemented in Cython. Note that the
    threading.RLock implementation in Python 3.4 and later tends to be as fast
    or even faster than the lock provided by this package, when called through
    the Python API. FastRLock is still faster also on these systems when called
    through its Cython API.
  homepage: https://github.com/scoder/fastrlock
  repository: https://github.com/scoder/fastrlock

extra:
  recipe-maintainers:
    - hmaarrfk
